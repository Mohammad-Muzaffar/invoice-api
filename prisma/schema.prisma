datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  phone             String
  user              User              @relation(fields: [userId], references: [id])
  userId            String
  invoices          Invoice[] // One customer can have many invoices
  addresses         Address[] // One customer may have multiple addresses
  shippingAddresses ShippingAddress[]
  quote             Quote[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Address {
  id               String   @id @default(cuid())
  customer         Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId       String
  address_1        String
  address_2        String?
  city             String
  state            String
  country          String
  postcode         String
  isDefaultAddress Boolean
}

model ShippingAddress {
  id         String    @id @default(cuid())
  customer   Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId String
  address_1  String
  address_2  String?
  city       String
  state      String
  country    String
  postcode   String
  phone      String
  invoice    Invoice[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Invoice {
  id                String             @id @default(cuid())
  invoiceNumber     String             @unique
  customer          Customer           @relation(fields: [customerId], references: [id])
  customerId        String
  customEmail       String?
  invoiceDate       DateTime
  invoiceDueDate    DateTime
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isDeleted         Boolean            @default(false)
  deletedAt         DateTime?
  status            InvoiceStatus
  notes             String?
  invoiceType       String?
  shippingAddress   ShippingAddress?   @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?
  invoiceItems      InvoiceItem[]
  invoiceCharges    InvoiceCharges?
  gstDetails        InvoiceGstDetails?
}

model InvoiceCharges {
  id        String  @id @default(cuid())
  subtotal  Int
  shipping  Int
  discount  Int?
  total     Int
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @unique
}

model InvoiceGstDetails {
  id        String  @id @default(cuid())
  invoice   Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId String  @unique
  cgst      Int     @default(0)
  sgst      Int     @default(0)
  igst      Int     @default(0)
  gstType   GstType
}

model InvoiceItem {
  id         String          @id @default(cuid())
  invoice    Invoice         @relation(fields: [invoiceId], references: [id])
  invoiceId  String
  product    String
  hsnSacCode String?
  qty        Int
  price      Int
  discount   Int?
  subtotal   Int
  gstDetails ItemGstDetails?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}

model ItemGstDetails {
  id            String      @id @default(cuid())
  invoiceItem   InvoiceItem @relation(fields: [invoiceItemId], references: [id])
  invoiceItemId String      @unique
  cgst          Int         @default(0)
  sgst          Int         @default(0)
  igst          Int         @default(0)
}

model Quote {
  id           String           @id @unique @default(cuid())
  quoteNumber  String           @unique
  customer     Customer         @relation(fields: [customerId], references: [id])
  customerId   String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  status       QuoteStatus
  paymentTerms String?
  deliverables String?
  termsOfSale  String?
  quoteItems   QuoteItem[]
  charges      QuoteCharges?
  gstDetails   QuoteGstDetails?
}

model QuoteItem {
  id       String @id @default(cuid())
  quote    Quote  @relation(fields: [quoteId], references: [id])
  quoteId  String @unique
  product  String
  qty      Int
  price    Int
  subtotal Int
}

model QuoteCharges {
  id       String @id @default(cuid())
  quote    Quote  @relation(fields: [quoteId], references: [id])
  quoteId  String @unique
  subtotal Int
  discount Int?
  total    Int
}

model QuoteGstDetails {
  id      String  @id @default(cuid())
  quote   Quote   @relation(fields: [quoteId], references: [id])
  quoteId String  @unique
  cgst    Int     @default(0)
  sgst    Int     @default(0)
  igst    Int     @default(0)
  gstType GstType
}

model Product {
  id           String   @id @default(cuid())
  productName  String
  productDesc  String?
  productPrice Int
  gstRate      GstRate  @relation(fields: [gstRateId], references: [id])
  gstRateId    String
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model GstRate {
  id          String    @id @default(cuid())
  hsnSacCode  String?
  description String?
  gstRate     Int
  cgstRate    Int
  sgstRate    Int
  igstRate    Int
  products    Product[]
}

model User {
  id                    String     @id @default(cuid())
  orgName               String
  username              String     @unique
  email                 String     @unique
  gstNumber             String     @unique
  phone                 String?
  password              String
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  customers             Customer[]
  refreshToken          String     @unique
  refreshTokenExpiresAt DateTime
  product               Product[]
}

enum GstType {
  INTRASTATE
  INTERSTATE
}

enum InvoiceStatus {
  PAID
  PENDING
}

enum QuoteStatus {
  PENDING
  APPROVED
  REJECTED
}
