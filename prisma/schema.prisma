datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String    @id @default(cuid())
  userName              String
  email                 String    @unique
  password              String
  companyName           String?
  companyLogo           String?   @map("company_logo") @db.VarChar(255)
  companyPhone          String    @unique
  companyStamp          String?   @map("company_stamp") @db.VarChar(255)
  companyAuthorizedSign String?   @map("company_authorized_sign") @db.VarChar(255)
  refreshToken          String?   @unique
  refreshTokenExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  street                String?
  city                  String?
  state                 String?
  country               String?
  postCode              String?
  panNumber             String?
  gstinNumber           String?
  msmeNumber            String?
  bankName              String?
  bankAccountNumber     String?
  bankBranchName        String?
  ifscCode              String?

  products         Product[]
  otps             Otp[]
  clients          Clients[]
  taxes            Taxes[]
  invoices         Invoice[]
  quotes           Quote[]
  purchaseInvoices PurchaseInvoice[]

  @@map("users") // Optional: Rename table in the DB
}

model Otp {
  id        String    @id @default(cuid())
  otp       String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Index for faster lookups by userId
}

model Clients {
  id                String    @id @default(cuid())
  firstName         String
  lastName          String
  email             String
  phoneNo           String
  panNo             String?
  companyName       String?
  clientGstinNumber String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime? @updatedAt
  userId            String
  user              User      @relation(fields: [userId], references: [id])

  addresses Address[]
  invoices  Invoice[]
  quotes    Quote[]

  @@index([userId, firstName, lastName, companyName]) // Index for faster lookups 
}

model Address {
  id       String @id @default(cuid())
  street   String
  city     String
  state    String
  country  String
  postCode String
  clientId String

  clients Clients @relation(fields: [clientId], references: [id], onDelete: Cascade)

  invoiceAddress Invoice[]

  quoteAddress Quote[]

  @@index([clientId])
}

model Taxes {
  id          String  @id @default(cuid())
  name        String
  hsnSacCode  String?
  description String?
  gst         Int
  cgst        Int?    @default(0)
  sgst        Int?    @default(0)
  igst        Int?    @default(0)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  products     Product[]
  invoiceItems InvoiceItems[]
  quoteItems   QuoteItems[]

  @@index([userId]) // Index for faster lookups by userId
}

model Product {
  id                 String  @id @default(cuid())
  productName        String
  productDescription String?
  hsnCode            String?
  price              Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  taxId String
  tax   Taxes  @relation(fields: [taxId], references: [id])

  invoiceItems InvoiceItems[]
  quoteItems   QuoteItems[]

  @@index([userId]) // Index for faster lookups by userId and taxId 
}

model Invoice {
  id             String   @id @default(cuid())
  invoiceNumber  String   @unique
  invoiceDate    DateTime
  invoiceDueDate DateTime

  status   InvoiceStatus
  subTotal Int

  total Int @default(0)

  discount Int @default(0)

  totalTax Int

  gst Int?

  cgst Int?

  sgst Int?

  igst Int?

  notes String?

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  isDeleted Boolean @default(false)

  deletedAt DateTime?

  invoiceItems InvoiceItems[]

  clientId String

  client Clients @relation(fields: [clientId], references: [id])

  shippingAddressId String?

  shippingAddress Address? @relation(fields: [shippingAddressId], references: [id])

  userId String?

  user User? @relation(fields: [userId], references: [id])

  quoteId String? @unique

  quote Quote? @relation(fields: [quoteId], references: [id])

  @@index([clientId, userId]) // Index for faster lookups by client and user ID 
}

model InvoiceItems {
  id                 String  @id @default(cuid())
  productName        String
  productDescription String?
  hsnCode            String?
  price              Int

  quantity Int @default(1)

  totalPrice Int

  subTotal Int

  taxableAmount Int

  taxId String?

  tax Taxes? @relation(fields: [taxId], references: [id])

  productId String

  product Product @relation(fields: [productId], references: [id])

  invoiceId String

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId]) // Index for faster lookups by invoice 
}

model Quote {
  id          String @id @default(cuid())
  quoteNumber String @unique

  quoteDate DateTime

  quoteDueDate DateTime

  status QuoteStatus

  subTotal Int

  total Int @default(0)

  discount Int @default(0)

  totalTax Int

  gst Int?

  cgst Int?

  sgst Int?

  igst Int?

  notes String

  createdAt DateTime @default(now())

  updatedAt DateTime? @updatedAt

  isDeleted Boolean @default(false)

  deletedAt DateTime?

  quoteItems QuoteItems[]

  clientId String

  client Clients @relation(fields: [clientId], references: [id])

  shippingAddressId String?

  shippingAddress Address? @relation(fields: [shippingAddressId], references: [id])

  userId String?

  user User? @relation(fields: [userId], references: [id])

  invoice Invoice?

  @@index([clientId, userId]) // Index for faster lookups by client and user ID 
}

model QuoteItems {
  id String @id @default(cuid())

  productName String

  productDescription String?

  hsnCode String?

  price Int

  quantity Int @default(1)

  totalPrice Int

  subTotal Int

  taxableAmount Int

  taxId String

  tax Taxes @relation(fields: [taxId], references: [id])

  productId String

  product Product @relation(fields: [productId], references: [id])

  quoteId String

  quote Quote @relation(fields: [quoteId], references: [id], onDelete: Cascade)
}

model PurchaseInvoice {
  id            String   @id @default(cuid())
  sellerName    String
  sellerAddress String?
  invoiceNumber String
  invoiceDate   DateTime
  total         Int      @default(0)
  subTotal      Int
  totalTax      Int
  discount      Int      @default(0)
  gst           Int?
  cgst          Int?
  sgst          Int?
  igst          Int?
  notes         String?

  createdAt DateTime @default(now())

  updatedAt DateTime @updatedAt

  invoiceItems PurchaseInvoiceItems[]

  userId String

  user User? @relation(fields: [userId], references: [id])

  @@index([userId]) // Index for faster lookups by user ID 
}

model PurchaseInvoiceItems {
  id                 String          @id @default(cuid())
  productName        String
  productDescription String?
  hsnCode            String?
  price              Int
  quantity           Int             @default(1)
  totalPrice         Int
  subTotal           Int
  taxableAmount      Int
  invoiceId          String
  purchaseInvoice    PurchaseInvoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
}

enum InvoiceStatus {
  Paid
  Partially_Paid
  Pending
}

enum QuoteStatus {
  Accepted
  Declined
  Draft
  Converted_To_Invoice
}
